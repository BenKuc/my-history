A) project
    1) change structure: history needs to be skipped later
    2) add everything to be imported by others to __init__
    3) rename app -> iTrack/keep-track
B) apps.py
    1) configuration of name and verbose_name
    2) ready(): connect receivers to the signals
C) history.py
    1) write custom managers and wrapped methods for sending signals
D) history models
    1) Simple events and references
    2) base for more complex events
    3) signals B) 2)
    4) settings check by model attribute -> schemes and so on
E) no history
    1) decorator/context-manager to skip history
    2) also no-history option for save, bulk,update by keyword-arg
F) all models
    1) nice __str__ representation

Functionality Testing
    1) generic relation on model; filtering on history


Ideas for future features
    1) ability to set tracking-connection -> continue to track a deleted model-
       instance by another model-instance. Rule for tracking can be a field-value
       or more generally a method that computes it. (or set explicitly)
    2) make full support for GenericForeignKeys with no int field as pk
        -> custom GenericForeignkey!
    3) on ObjectEvent add more triggers (e.g. atomic)